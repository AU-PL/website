metavar term_var, x, y, z, f, u, v, s, p, w , r , not {{tex \mathsf{not} }} , NAME , NEWLINE {{tex \mathsf{NEWLINE} }} ::=

grammar

program, P :: 'prog_' ::=
  | x := b :: :: GlobalDef
  | P1 NEWLINE P2 :: :: File

booleans, b :: 'bool_' ::=
  | x :: :: Var
  | 0 :: :: False
  {{tex 0 }}
  | 1 :: :: True
  {{tex 1}}
  | b1 x b2 :: :: And
  {{tex [[b1]] \land [[b2]] }}
  | b1 + b2 :: :: Or
  {{tex [[b1]] \lor [[b2]] }}
  | if b b1 b2 :: :: If
  {{tex \mathsf{if}\,[[b]]\,\mathsf{then}\,[[b1]]\,\mathsf{else}\,[[b2]] }}
  | fun x => b :: :: Fun
  {{tex \mathsf{fun}\,[[x]] \Rightarrow [[b]] }}  
  | let x = b1 in b2 :: :: Let
  {{tex \mathsf{let}\,[[x]] = [[b1]]\,\mathsf{in}\,[[b2]] }}
  | app b1 b2 :: :: App
  {{tex \mathsf{app}\,[[b1]]\,[[b2]] }}
  | ( b ) :: :: Parens
  | pT b :: M :: ParseTree
  {{tex \mathsf{pT}\,[[b]] }}
  | FV( b ) :: M :: FreeVars
  {{tex \mathsf{FV}([[b]]) }}
  | BV( b ) :: M :: BoundVars
  {{tex \mathsf{BV}([[b]]) }}
  | [ b / x ] b' :: M :: Subst
  
formula :: 'formula_' ::=
  | judgement              ::  :: judgement
  | judgement1 && judgement2 :: :: Quad
  {{tex [[judgement1]] \quad [[judgement2]] }}
  | depth( t ) :: :: Depth
  {{tex \mathsf{depth}([[t]]) }}
  | FV ( t )   :: :: FV
  {{tex \mathsf{FV}( [[t]] ) }}

defns
 Opsem :: '' ::=
 defn
 b1 ~> b2 :: :: red :: ''
   {{tex [[b1]] \rightsquigarrow [[b2]] }}
 by

  ------------------------------ :: Beta
  app (fun x => b) b' ~> [b'/x]b

  b ~> b'
  ----------------------------- :: Fun
  (fun x => b) ~> (fun x => b')

  b1 ~> b1'
  ----------------------- :: App1
  app b1 b2 ~> app b1' b2

  b2 ~> b2'
  ----------------------- :: App2
  app b1 b2 ~> app b1 b2'

  ------------ :: AndTrue
  (1 x 1) ~> 1

  ------------ :: AndFalse1
  (0 x 1) ~> 0

  ------------ :: AndFalse2
  (1 x 0) ~> 0

  ------------ :: AndFalse
  (0 x 0) ~> 0

  b1 ~> b1'
  ----------------------- :: And1
  (b1 x b2) ~> (b1' x b2)

  b2 ~> b2'
  ----------------------- :: And2
  (b1 x b2) ~> (b1 x b2')


  ------------ :: OrTrue
  (1 + 1) ~> 1

  ------------ :: OrTrue2
  (0 + 1) ~> 1

  ------------ :: OrTrue1
  (1 + 0) ~> 1

  ------------ :: OrFalse
  (0 + 0) ~> 0

  b1 ~> b1'
  ----------------------- :: Or1
  (b1 + b2) ~> (b1' + b2)

  b2 ~> b2'
  ----------------------- :: Or2
  (b1 + b2) ~> (b1 + b2')

  ---------------- :: IfTrue
  if 1 b1 b2 ~> b1

  ---------------- :: IfFalse
  if 0 b1 b2 ~> b2

  b ~> b'
  ------------------------- :: If1
  if b b1 b2 ~> if b' b1 b2

  b1 ~> b1'
  ------------------------- :: If2
  if b b1 b2 ~> if b b1' b2

  b2 ~> b2'
  ------------------------- :: If3
  if b b1 b2 ~> if b b1 b2'

 defn
 b1 ~>* b2 :: :: mred :: ''
   {{tex [[b1]] \rightsquigarrow^* [[b2]] }}
 by

 ------- :: Refl
 b ~>* b

 b1 ~> b2
 --------- :: Step
 b1 ~>* b2

 b1 ~>* b2 && b2 ~>* b3
 ---------------------- :: Mult
 b1 ~>* b3